import { Inject, Injectable, InjectionToken, Optional, PLATFORM_ID, defineInjectable, inject } from '@angular/core';
import * as i0 from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { Router } from '@angular/router';
import * as i1 from '@angular/router';
import { empty, fromEvent, merge, of } from 'rxjs';
import { catchError, mapTo, startWith } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const OFFLINE_ROUTE_OFFLINE = new InjectionToken('offline-config-route-offline', {
    providedIn: 'root',
    factory: () => '/offline'
});
const OFFLINE_ROUTE_UNAVAILABLE = new InjectionToken('offline-config-route-unavailable', {
    providedIn: 'root',
    factory: () => '/unavailable'
});
const OFFLINE_GUARDS_REDIRECT = new InjectionToken('offline-config-guards-redirect', {
    providedIn: 'root',
    factory: () => true
});
/**
 * @record
 */

/**
 * @param {?} config
 * @return {?}
 */
function offlineProviders(config) {
    return [
        config.routeOffline ? { provide: OFFLINE_ROUTE_OFFLINE, useValue: config.routeOffline } : [],
        config.routeUnavailable ? { provide: OFFLINE_ROUTE_UNAVAILABLE, useValue: config.routeUnavailable } : [],
        config.guardsRedirect === false ? { provide: OFFLINE_GUARDS_REDIRECT, useValue: false } : [],
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Network {
    /**
     * @param {?} router
     * @param {?} platformId
     * @param {?} routeOffline
     * @param {?} routeUnavailable
     */
    constructor(router, platformId, routeOffline, routeUnavailable) {
        this.router = router;
        this.platformId = platformId;
        this.routeOffline = routeOffline;
        this.routeUnavailable = routeUnavailable;
        /* Store instance in a static property to allow access to injected services in the RxJS static operator
             * Should be done only once */
        if (!Network.instance) {
            Network.instance = this;
        }
        this.initOnlineObservable();
    }
    /**
     * Check if Internet connection is available
     * @return {?}
     */
    get online() {
        return isPlatformBrowser(this.platformId) ? navigator.onLine : true;
    }
    /**
     * Do not use this method, use `catchOffline` function directly
     * @template T
     * @return {?}
     */
    static catchOffline() {
        return catchError(Network.catchCallback);
    }
    /**
     * @template T
     * @param {?} error
     * @param {?} caught
     * @return {?}
     */
    static catchCallback(error, caught) {
        if (!Network.instance) {
            console.log(`You need to import OfflineModule in your AppModule
      AND to inject the Network service at least once, for example in your AppComponent constructor.`);
            throw error;
        }
        else if (!Network.instance.router) {
            console.log(`You need to import RouterModule.forRoot([]) in your application.`);
            throw error;
        }
        else {
            if (!Network.instance.online) {
                Network.instance.router.navigate([Network.instance.routeOffline]);
                return empty();
            }
            else if (error.status && (error.status >= 500 && error.status < 600)) {
                Network.instance.router.navigate([Network.instance.routeUnavailable]);
                return empty();
            }
            else {
                throw error;
            }
        }
    }
    /**
     * @return {?}
     */
    initOnlineObservable() {
        this.onlineChanges = !isPlatformBrowser(this.platformId) ? of(true) : merge(fromEvent(window, 'online').pipe(mapTo(true)), fromEvent(window, 'offline').pipe(mapTo(false)))
            .pipe(startWith(this.online));
    }
}
Network.instance = null;
Network.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
Network.ctorParameters = () => [
    { type: Router, decorators: [{ type: Optional },] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [OFFLINE_ROUTE_OFFLINE,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [OFFLINE_ROUTE_UNAVAILABLE,] },] },
];
/** @nocollapse */ Network.ngInjectableDef = defineInjectable({ factory: function Network_Factory() { return new Network(inject(Router, 8), inject(PLATFORM_ID), inject(OFFLINE_ROUTE_OFFLINE), inject(OFFLINE_ROUTE_UNAVAILABLE)); }, token: Network, providedIn: "root" });
/**
 * Catch offline errors (no Internet connection) and server errors (HTTP status 5xx)
 * and redirect to /offline or /unavailable page (routes can be changed in the OfflineModule)
 */
const catchOffline = Network.catchOffline;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Check if Internet connection is available to allow a navigation to a route or not.
 * By default, if Internet connection is not available, the user will be redirected to the /offline page.
 * This behavior and the URL of redirection can be configured in the OfflineModule.
 */
class OnlineGuard {
    /**
     * @param {?} router
     * @param {?} network
     * @param {?} routeOffline
     * @param {?} guardsRedirect
     */
    constructor(router, network, routeOffline, guardsRedirect) {
        this.router = router;
        this.network = network;
        this.routeOffline = routeOffline;
        this.guardsRedirect = guardsRedirect;
    }
    /**
     * @return {?}
     */
    canActivate() {
        return this.guard();
    }
    /**
     * @return {?}
     */
    canActivateChild() {
        return this.guard();
    }
    /**
     * @return {?}
     */
    canLoad() {
        return this.guard();
    }
    /**
     * @return {?}
     */
    guard() {
        if (!this.network.online) {
            if (this.guardsRedirect) {
                this.router.navigate([this.routeOffline]);
            }
            return false;
        }
        return true;
    }
}
OnlineGuard.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] },
];
/** @nocollapse */
OnlineGuard.ctorParameters = () => [
    { type: Router, },
    { type: Network, },
    { type: undefined, decorators: [{ type: Inject, args: [OFFLINE_ROUTE_OFFLINE,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [OFFLINE_GUARDS_REDIRECT,] },] },
];
/** @nocollapse */ OnlineGuard.ngInjectableDef = defineInjectable({ factory: function OnlineGuard_Factory() { return new OnlineGuard(inject(Router), inject(Network), inject(OFFLINE_ROUTE_OFFLINE), inject(OFFLINE_GUARDS_REDIRECT)); }, token: OnlineGuard, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { offlineProviders, OFFLINE_GUARDS_REDIRECT, OFFLINE_ROUTE_OFFLINE, OFFLINE_ROUTE_UNAVAILABLE, Network, catchOffline, OnlineGuard };
//# sourceMappingURL=offline.js.map
