{"version":3,"file":"offline.js","sources":["../../out-tsc/lib/src/tokens.ts","../../out-tsc/lib/src/network.service.ts","../../out-tsc/lib/src/online.guard.ts","../../out-tsc/lib/index.ts","../../out-tsc/lib/offline.ts"],"sourcesContent":["import { InjectionToken, Provider } from '@angular/core';\n\nexport const OFFLINE_ROUTE_OFFLINE = new InjectionToken<string>('offline-config-route-offline', {\n  providedIn: 'root',\n  factory: () => '/offline'\n });\nexport const OFFLINE_ROUTE_UNAVAILABLE = new InjectionToken<string>('offline-config-route-unavailable', {\n  providedIn: 'root',\n  factory: () => '/unavailable'\n });\nexport const OFFLINE_GUARDS_REDIRECT = new InjectionToken<boolean>('offline-config-guards-redirect', {\n  providedIn: 'root',\n  factory: () => true\n });\n\nexport interface OfflineProvidersConfig {\n  /** Full URL of the page to redirect to when Internet connection is unavailable (default: '/offline') */\n  routeOffline?: string;\n  /** Full URL of the page to redirect to when the server is unavailable (default: '/unavailable') */\n  routeUnavailable?: string;\n  /**\n   * Tells guards to redirect to the offline page when Internet connection is unavailable (default: true)\n   * or to just block the navigation\n   */\n  guardsRedirect?: boolean;\n}\n\nexport function offlineProviders(config: OfflineProvidersConfig): Provider[] {\n\n  return [\n    config.routeOffline ? { provide: OFFLINE_ROUTE_OFFLINE, useValue: config.routeOffline }  : [],\n    config.routeUnavailable ? { provide: OFFLINE_ROUTE_UNAVAILABLE, useValue: config.routeUnavailable } : [],\n    config.guardsRedirect === false ? { provide: OFFLINE_GUARDS_REDIRECT, useValue: false } : [],\n  ];\n\n}\n","import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { Observable, fromEvent, of, merge, empty, OperatorFunction } from 'rxjs';\nimport { catchError, mapTo, startWith } from 'rxjs/operators';\n\nimport { OFFLINE_ROUTE_OFFLINE, OFFLINE_ROUTE_UNAVAILABLE } from './tokens';\n\n@Injectable({ providedIn: 'root' })\nexport class Network {\n\n  static instance: Network | null = null;\n\n  /** Observable to listen when Internet connection availability changes */\n  onlineChanges: Observable<boolean>;\n\n  /** Check if Internet connection is available */\n  get online(): boolean {\n    return isPlatformBrowser(this.platformId) ? navigator.onLine : true;\n  }\n\n  /** Do not use this method, use `catchOffline` function directly */\n  static catchOffline<T>() {\n\n    return catchError<T, T>(Network.catchCallback);\n\n  }\n\n  protected static catchCallback<T>(error: any, caught: Observable<T>): Observable<T> {\n\n    if (!Network.instance) {\n\n      console.log(`You need to import OfflineModule in your AppModule\n      AND to inject the Network service at least once, for example in your AppComponent constructor.`);\n\n      throw error;\n\n    } else if (!Network.instance.router) {\n\n      console.log(`You need to import RouterModule.forRoot([]) in your application.`);\n\n      throw error;\n\n    } else {\n\n      if (!Network.instance.online) {\n\n        Network.instance.router.navigate([Network.instance.routeOffline]);\n\n        return empty();\n\n      } else if (error.status && (error.status >= 500 && error.status < 600)) {\n\n        Network.instance.router.navigate([Network.instance.routeUnavailable]);\n\n        return empty();\n\n      } else {\n\n        throw error;\n\n      }\n\n    }\n\n  }\n\n  constructor(\n    @Optional() protected router: Router,\n    @Inject(PLATFORM_ID) protected platformId: string,\n    @Inject(OFFLINE_ROUTE_OFFLINE) protected routeOffline: string,\n    @Inject(OFFLINE_ROUTE_UNAVAILABLE) protected routeUnavailable: string,\n  ) {\n\n    /* Store instance in a static property to allow access to injected services in the RxJS static operator\n     * Should be done only once */\n    if (!Network.instance) {\n\n      Network.instance = this;\n\n    }\n\n    this.initOnlineObservable();\n\n  }\n\n  protected initOnlineObservable() {\n\n    this.onlineChanges = !isPlatformBrowser(this.platformId) ? of(true) : merge(\n      fromEvent(window, 'online').pipe(mapTo(true)),\n      fromEvent(window, 'offline').pipe(mapTo(false)),\n    )\n    .pipe(startWith(this.online));\n\n  }\n\n}\n\n/**\n * Catch offline errors (no Internet connection) and server errors (HTTP status 5xx)\n * and redirect to /offline or /unavailable page (routes can be changed in the OfflineModule)\n */\nexport const catchOffline = Network.catchOffline;\n","import { Injectable, Inject } from '@angular/core';\nimport { Router, CanActivate, CanActivateChild, CanLoad } from '@angular/router';\n\nimport { OFFLINE_ROUTE_OFFLINE, OFFLINE_GUARDS_REDIRECT } from './tokens';\nimport { Network } from './network.service';\n\n/**\n * Check if Internet connection is available to allow a navigation to a route or not.\n * By default, if Internet connection is not available, the user will be redirected to the /offline page.\n * This behavior and the URL of redirection can be configured in the OfflineModule.\n */\n@Injectable({ providedIn: 'root' })\nexport class OnlineGuard implements CanActivate, CanActivateChild, CanLoad {\n\n  constructor(\n    protected router: Router,\n    protected network: Network,\n    @Inject(OFFLINE_ROUTE_OFFLINE) protected routeOffline: string,\n    @Inject(OFFLINE_GUARDS_REDIRECT) protected guardsRedirect: boolean,\n  ) {}\n\n  canActivate() {\n    return this.guard();\n  }\n\n  canActivateChild() {\n    return this.guard();\n  }\n\n  canLoad() {\n    return this.guard();\n  }\n\n\n  protected guard(): boolean {\n\n    if (!this.network.online) {\n\n      if (this.guardsRedirect) {\n        this.router.navigate([this.routeOffline]);\n      }\n\n      return false;\n\n    }\n\n    return true;\n\n  }\n\n}\n","export {\n  OfflineProvidersConfig, offlineProviders,\n  OFFLINE_GUARDS_REDIRECT, OFFLINE_ROUTE_OFFLINE, OFFLINE_ROUTE_UNAVAILABLE\n} from './src/tokens';\nexport { Network, catchOffline } from './src/network.service';\nexport { OnlineGuard } from './src/online.guard';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}