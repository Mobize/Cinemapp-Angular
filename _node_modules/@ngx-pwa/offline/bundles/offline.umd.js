(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('rxjs'), require('rxjs/operators')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/router', 'rxjs', 'rxjs/operators'], factory) :
	(factory((global.ngxPWA = global.ngxPWA || {}, global.ngxPWA.offline = global.ngxPWA.offline || {}),global.ng.core,global.ng.common,global.ng.router,global.Rx,global.Rx.operators));
}(this, (function (exports,i0,_angular_common,i1,rxjs,rxjs_operators) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var OFFLINE_ROUTE_OFFLINE = new i0.InjectionToken('offline-config-route-offline', {
    providedIn: 'root',
    factory: function () { return '/offline'; }
});
var OFFLINE_ROUTE_UNAVAILABLE = new i0.InjectionToken('offline-config-route-unavailable', {
    providedIn: 'root',
    factory: function () { return '/unavailable'; }
});
var OFFLINE_GUARDS_REDIRECT = new i0.InjectionToken('offline-config-guards-redirect', {
    providedIn: 'root',
    factory: function () { return true; }
});
/**
 * @record
 */

/**
 * @param {?} config
 * @return {?}
 */
function offlineProviders(config) {
    return [
        config.routeOffline ? { provide: OFFLINE_ROUTE_OFFLINE, useValue: config.routeOffline } : [],
        config.routeUnavailable ? { provide: OFFLINE_ROUTE_UNAVAILABLE, useValue: config.routeUnavailable } : [],
        config.guardsRedirect === false ? { provide: OFFLINE_GUARDS_REDIRECT, useValue: false } : [],
    ];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Network = /** @class */ (function () {
    function Network(router, platformId, routeOffline, routeUnavailable) {
        this.router = router;
        this.platformId = platformId;
        this.routeOffline = routeOffline;
        this.routeUnavailable = routeUnavailable;
        /* Store instance in a static property to allow access to injected services in the RxJS static operator
             * Should be done only once */
        if (!Network.instance) {
            Network.instance = this;
        }
        this.initOnlineObservable();
    }
    Object.defineProperty(Network.prototype, "online", {
        /** Check if Internet connection is available */
        get: /**
         * Check if Internet connection is available
         * @return {?}
         */
        function () {
            return _angular_common.isPlatformBrowser(this.platformId) ? navigator.onLine : true;
        },
        enumerable: true,
        configurable: true
    });
    /** Do not use this method, use `catchOffline` function directly */
    /**
     * Do not use this method, use `catchOffline` function directly
     * @template T
     * @return {?}
     */
    Network.catchOffline = /**
     * Do not use this method, use `catchOffline` function directly
     * @template T
     * @return {?}
     */
    function () {
        return rxjs_operators.catchError(Network.catchCallback);
    };
    /**
     * @template T
     * @param {?} error
     * @param {?} caught
     * @return {?}
     */
    Network.catchCallback = /**
     * @template T
     * @param {?} error
     * @param {?} caught
     * @return {?}
     */
    function (error, caught) {
        if (!Network.instance) {
            console.log("You need to import OfflineModule in your AppModule\n      AND to inject the Network service at least once, for example in your AppComponent constructor.");
            throw error;
        }
        else if (!Network.instance.router) {
            console.log("You need to import RouterModule.forRoot([]) in your application.");
            throw error;
        }
        else {
            if (!Network.instance.online) {
                Network.instance.router.navigate([Network.instance.routeOffline]);
                return rxjs.empty();
            }
            else if (error.status && (error.status >= 500 && error.status < 600)) {
                Network.instance.router.navigate([Network.instance.routeUnavailable]);
                return rxjs.empty();
            }
            else {
                throw error;
            }
        }
    };
    /**
     * @return {?}
     */
    Network.prototype.initOnlineObservable = /**
     * @return {?}
     */
    function () {
        this.onlineChanges = !_angular_common.isPlatformBrowser(this.platformId) ? rxjs.of(true) : rxjs.merge(rxjs.fromEvent(window, 'online').pipe(rxjs_operators.mapTo(true)), rxjs.fromEvent(window, 'offline').pipe(rxjs_operators.mapTo(false)))
            .pipe(rxjs_operators.startWith(this.online));
    };
    Network.instance = null;
    Network.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    Network.ctorParameters = function () { return [
        { type: i1.Router, decorators: [{ type: i0.Optional },] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] },] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [OFFLINE_ROUTE_OFFLINE,] },] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [OFFLINE_ROUTE_UNAVAILABLE,] },] },
    ]; };
    /** @nocollapse */ Network.ngInjectableDef = i0.defineInjectable({ factory: function Network_Factory() { return new Network(i0.inject(i1.Router, 8), i0.inject(i0.PLATFORM_ID), i0.inject(OFFLINE_ROUTE_OFFLINE), i0.inject(OFFLINE_ROUTE_UNAVAILABLE)); }, token: Network, providedIn: "root" });
    return Network;
}());
/**
 * Catch offline errors (no Internet connection) and server errors (HTTP status 5xx)
 * and redirect to /offline or /unavailable page (routes can be changed in the OfflineModule)
 */
var catchOffline = Network.catchOffline;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Check if Internet connection is available to allow a navigation to a route or not.
 * By default, if Internet connection is not available, the user will be redirected to the /offline page.
 * This behavior and the URL of redirection can be configured in the OfflineModule.
 */
var OnlineGuard = /** @class */ (function () {
    function OnlineGuard(router, network, routeOffline, guardsRedirect) {
        this.router = router;
        this.network = network;
        this.routeOffline = routeOffline;
        this.guardsRedirect = guardsRedirect;
    }
    /**
     * @return {?}
     */
    OnlineGuard.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        return this.guard();
    };
    /**
     * @return {?}
     */
    OnlineGuard.prototype.canActivateChild = /**
     * @return {?}
     */
    function () {
        return this.guard();
    };
    /**
     * @return {?}
     */
    OnlineGuard.prototype.canLoad = /**
     * @return {?}
     */
    function () {
        return this.guard();
    };
    /**
     * @return {?}
     */
    OnlineGuard.prototype.guard = /**
     * @return {?}
     */
    function () {
        if (!this.network.online) {
            if (this.guardsRedirect) {
                this.router.navigate([this.routeOffline]);
            }
            return false;
        }
        return true;
    };
    OnlineGuard.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] },
    ];
    /** @nocollapse */
    OnlineGuard.ctorParameters = function () { return [
        { type: i1.Router, },
        { type: Network, },
        { type: undefined, decorators: [{ type: i0.Inject, args: [OFFLINE_ROUTE_OFFLINE,] },] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [OFFLINE_GUARDS_REDIRECT,] },] },
    ]; };
    /** @nocollapse */ OnlineGuard.ngInjectableDef = i0.defineInjectable({ factory: function OnlineGuard_Factory() { return new OnlineGuard(i0.inject(i1.Router), i0.inject(Network), i0.inject(OFFLINE_ROUTE_OFFLINE), i0.inject(OFFLINE_GUARDS_REDIRECT)); }, token: OnlineGuard, providedIn: "root" });
    return OnlineGuard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

exports.offlineProviders = offlineProviders;
exports.OFFLINE_GUARDS_REDIRECT = OFFLINE_GUARDS_REDIRECT;
exports.OFFLINE_ROUTE_OFFLINE = OFFLINE_ROUTE_OFFLINE;
exports.OFFLINE_ROUTE_UNAVAILABLE = OFFLINE_ROUTE_UNAVAILABLE;
exports.Network = Network;
exports.catchOffline = catchOffline;
exports.OnlineGuard = OnlineGuard;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=offline.umd.js.map
